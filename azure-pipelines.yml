trigger:
- main

pool:
  vmImage: 'windows-2022'
  demands:
    - msbuild
    - visualstudio
    - vstest

variables:
  solution: '**/*.sln'
  buildPlatform: 'x86|x64|ARM'
  buildConfiguration: 'Release'
  VCPKG_ROOT: '$(Build.SourcesDirectory)\vcpkg'
  VCPKG_CMAKE_OPTIONS: '-DCMAKE_TOOLCHAIN_FILE=$(VCPKG_ROOT)\scripts\buildsystems\vcpkg.cmake'
  SDKVersion: ''

jobs:
  - job: build
    strategy:
      matrix:
        x64:
          platform: 'x64'
          boost_triplet: 'x64-windows'
          artifact_name: '64-bit'
          debug-platform: 'x64'
        x86:
          platform: 'x86'
          boost_triplet: 'x86-windows'
          artifact_name: '32-bit'
          debug-platform: 'Win32'
    steps:
      - task: PowerShell@2
        displayName: 'Check Installed Windows SDK Version'
        inputs:
          targetType: 'inline'
          script: |
            $x86SdkPath = "C:\Program Files (x86)\Windows Kits\10\Include"
            $x64SdkPath = "C:\Program Files\Windows Kits\10\Include"
            
            function Get-SdkVersion {
                param ($sdkPath)
                
                $sdkVersion = Get-ChildItem $sdkPath | Where-Object { $_.PSIsContainer -and $_.Name -match '^\d+\.\d+' } | Sort-Object -Property Name | Select-Object -Last 1
                
                return $sdkVersion
            }

            $sdkFolder = $null
            if (Test-Path $x64SdkPath) {
                $sdkFolder = Get-SdkVersion -sdkPath $x64SdkPath
            } elseif (Test-Path $x86SdkPath) {
                $sdkFolder = Get-SdkVersion -sdkPath $x86SdkPath
            }
            
            if ($sdkFolder) {
                Write-Host "Installed Windows SDK version: $($sdkFolder.Name)"
                Write-Host "##vso[task.setvariable variable=SDKVersion]$($sdkFolder.Name)"
            } else {
                Write-Host "Windows SDK not found!"
                exit 1
            }

      - task: PowerShell@2
        displayName: 'Install and Integrate vcpkg'
        inputs:
          targetType: 'inline'
          script: |
            echo "Cloning and bootstrapping vcpkg"
            git clone https://github.com/microsoft/vcpkg.git $(VCPKG_ROOT)
            cd $(VCPKG_ROOT)
            .\bootstrap-vcpkg.bat
            .\vcpkg.exe integrate install

      - task: PowerShell@2
        displayName: 'Install Boost JSON'
        inputs:
          targetType: 'inline'
          script: |
            if (!(Test-Path "$(VCPKG_ROOT)\vcpkg.exe")) {
                Write-Error "vcpkg.exe not found. Exiting..."
                exit 1
            }
            Write-Host "Installing Boost JSON for $(boost_triplet)..."
            & "$(VCPKG_ROOT)\vcpkg.exe" install boost-json:$(platform)-windows
            # List Boost packages
            Write-Host "Listing installed Boost packages"
            & "$(VCPKG_ROOT)\vcpkg.exe" list boost

      - task: CMake@1
        displayName: 'Configure CMake for $(platform)'
        inputs:
          workingDirectory: '$(Build.SourcesDirectory)\LogMonitor'
          cmakeArgs: |
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$(VCPKG_ROOT)\scripts\buildsystems\vcpkg.cmake -DCMAKE_SYSTEM_VERSION=$(SDKVersion) -DVCPKG_TARGET_TRIPLET=$(boost_triplet) -DBOOST_ROOT=$(VCPKG_ROOT)\installed\$(boost_triplet) -DBoost_INCLUDE_DIR=$(VCPKG_ROOT)\installed\$(boost_triplet)\include -DGTest_INCLUDE_DIRS=$(VCPKG_ROOT)\installed\$(boost_triplet)\include -DCMAKE_CXX_STANDARD=17 -A $(debug-platform)  # Platform-specific architecture -S $(Build.SourcesDirectory)\LogMonitor -B $(Build.BinariesDirectory)\LogMonitor\$(platform) -DCMAKE_VERBOSE_MAKEFILE=ON

      - task: CMake@1
        displayName: 'Build $(platform) with CMake'
        inputs:
          workingDirectory: '$(Build.BinariesDirectory)\LogMonitor\$(platform)'
          cmakeArgs: '--build . --config $(buildConfiguration) --parallel -- /p:PreferredToolArchitecture=$(platform)'
          
      - task: ComponentGovernanceComponentDetection@0
        inputs:
          scanType: 'Register'
          verbosity: 'Verbose'
          alertWarningLevel: 'Low'

      - task: VisualStudioTestPlatformInstaller@1
        inputs:
          packageFeedSelector: 'nugetOrg'
          versionSelector: 'latestPreRelease'

      - task: VSTest@2
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: '**\*test*.dll'
          searchFolder: '$(Build.BinariesDirectory)\LogMonitor\$(platform)\Release\'
          runOnlyImpactedTests: false
          runInParallel: false
          rerunFailedTests: true
          rerunMaxAttempts: 3
      
      # Publish build artifacts
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.BinariesDirectory)\LogMonitor\$(platform)\Release\'
          artifactType: 'pipeline'
          artifactName: '$(artifact_name)'


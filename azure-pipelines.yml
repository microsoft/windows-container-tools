trigger:
  - main

pool:
  vmImage: 'windows-2022'
  demands:
    - msbuild
    - visualstudio

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  VCPKG_ROOT: '$(Build.SourcesDirectory)\vcpkg'
  VCPKG_TRIPLET: 'x64-windows-static'
  VCPKG_CMAKE_OPTIONS: '-DCMAKE_TOOLCHAIN_FILE=$(VCPKG_ROOT)\scripts\buildsystems\vcpkg.cmake'
  SDKVersion: ''

jobs:
- job: build
  steps:
    - task: PowerShell@2
      displayName: 'Install vcpkg'
      inputs:
        targetType: 'inline'
        script: |
          echo "Cloning and bootstrapping vcpkg"
          git clone https://github.com/microsoft/vcpkg.git $(VCPKG_ROOT)
          cd $(VCPKG_ROOT)
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe integrate install

    - task: PowerShell@2
      displayName: 'Install Boost Dependencies (JSON, Algorithm)'
      inputs:
        targetType: 'inline'
        script: |
          if (!(Test-Path "$(VCPKG_ROOT)\vcpkg.exe")) {
              Write-Error "vcpkg.exe not found. Exiting..."
              exit 1
          }
          Write-Host "Installing Boost static libraries for platform: $(buildPlatform)..."
          & "$(VCPKG_ROOT)\vcpkg.exe" install boost-json:$(VCPKG_TRIPLET) boost-algorithm:$(VCPKG_TRIPLET)

    - task: PowerShell@2
      displayName: 'Verify vcpkg Integration'
      inputs:
        targetType: 'inline'
        script: |
          echo "Verifying vcpkg integration for platform: $(buildPlatform)..."
          & "$(VCPKG_ROOT)\vcpkg.exe" integrate install
          $basePath = "$(VCPKG_ROOT)\installed\$(VCPKG_TRIPLET)\include"
          $checks = @(
            "boost\json.hpp",
            "boost\algorithm\string\replace.hpp"
          )
          foreach ($header in $checks) {
            $path = Join-Path $basePath $header
            if (!(Test-Path $path)) {
              Write-Error "Missing header: $path"
              exit 1
            }
          }
          Write-Output "All Boost headers found."

    - task: PowerShell@2
      displayName: 'Check Installed Windows SDK Version'
      inputs:
        targetType: 'inline'
        script: |
          $x86SdkPath = "C:\Program Files (x86)\Windows Kits\10\Include"
          $x64SdkPath = "C:\Program Files\Windows Kits\10\Include"
          $armSdkPath = "C:\Program Files\Windows Kits\10\Include\arm64"

          function Get-SdkVersion {
              param ($sdkPath)
              $sdkVersion = Get-ChildItem $sdkPath | Where-Object { $_.PSIsContainer -and $_.Name -match '^\d+\.\d+' } | Sort-Object -Property Name | Select-Object -Last 1
              return $sdkVersion
          }

          $sdkFolder = $null
          if (Test-Path $x64SdkPath) {
              $sdkFolder = Get-SdkVersion -sdkPath $x64SdkPath
          } elseif (Test-Path $x86SdkPath) {
              $sdkFolder = Get-SdkVersion -sdkPath $x86SdkPath
          } elseif (Test-Path $armSdkPath) {
              $sdkFolder = Get-SdkVersion -sdkPath $armSdkPath
          }

          if ($sdkFolder) {
              Write-Host "Installed Windows SDK version: $($sdkFolder.Name)"
              Write-Host "##vso[task.setvariable variable=SDKVersion]$($sdkFolder.Name)"
          } else {
              Write-Host "Windows SDK not found!"
              exit 1
          }

    - task: CMake@1
      displayName: 'Configure CMake'
      inputs:
        workingDirectory: '$(Build.SourcesDirectory)\LogMonitor'
        cmakeArgs: |
          -A $(buildPlatform) -S $(Build.SourcesDirectory)\LogMonitor -B $(Build.BinariesDirectory)\LogMonitor\$(buildPlatform) $(VCPKG_CMAKE_OPTIONS)

    - task: CMake@1
      displayName: 'Build with CMake'
      inputs:
        workingDirectory: '$(Build.BinariesDirectory)\LogMonitor\$(buildPlatform)'
        cmakeArgs: '--build . --config $(buildConfiguration) --parallel'

    - task: ComponentGovernanceComponentDetection@0
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        alertWarningLevel: 'Low'

    - task: VisualStudioTestPlatformInstaller@1
      inputs:
        packageFeedSelector: 'nugetOrg'
        versionSelector: 'latestPreRelease'

    - task: VSTest@2
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: '**\*test*.dll'
        searchFolder: '$(Build.BinariesDirectory)\LogMonitor\$(buildPlatform)\$(buildConfiguration)\'
        runOnlyImpactedTests: false
        runInParallel: false
        rerunFailedTests: true
        rerunMaxAttempts: 3

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.BinariesDirectory)\LogMonitor\$(buildPlatform)\$(buildConfiguration)\'
        artifactType: 'pipeline'
        artifactName: '$(buildPlatform)-$(buildConfiguration)'
